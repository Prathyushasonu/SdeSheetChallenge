from os import *
from sys import *
from collections import *
from math import *

def merge(arr,temp,left,mid,right):
    cnt=0
    i=left
    j=mid
    k=left
    while i<=mid-1 and j<=right:
        if arr[i]<=arr[j]:
            temp[k]=arr[i]
            k+=1;i+=1
        else:
            temp[k]=arr[j]
            j+=1;k+=1
            cnt+=mid-i
    while i<=mid-1:
        temp[k]=arr[i]
        k+=1;i+=1
    while j<=right:
        temp[k]=arr[j]
        k+=1;j+=1
    for i in range(left,right+1):
        arr[i]=temp[i]
    return cnt
def mergesort(arr,temp,left,right,count):
    if right>left:
        mid=(left+right)//2
        mergesort(arr,temp,left,mid,count)
        mergesort(arr,temp,mid+1,right,count)
        count[0]+=merge(arr,temp,left,mid+1,right)
    return count[0]
def getInversions(arr, n) :
    temp=[0 for i in range(n)]
    count=[0]
    return mergesort(arr,temp,0,n-1,count)

# Taking inpit using fast I/O.
def takeInput() :
    n = int(input())
    arr = list(map(int, stdin.readline().strip().split(" ")))
    return arr, n

# Main.
arr, n = takeInput()
print(getInversions(arr, n))
